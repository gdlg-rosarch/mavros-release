#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2014 Nuno Marques, Vladimir Ermakov.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

from __future__ import print_function

import sys
import argparse

import rospy
from std_msgs.msg import Header
from geometry_msgs.msg import TwistStamped, PoseStamped, Vector3, Point
from mavros.srv import CommandBool

_ONCE_DELAY = 3


def print_if(cond, *args, **kvargs):
    if cond:
        print(*args, **kvargs)


def fault(*args, **kvargs):
    kvargs['file'] = sys.stderr
    print(*args, **kvargs)
    sys.exit(1)


def publish_once(args, pub, msg):
    pub.publish(msg)
    print_if(pub.get_num_connections() < 1,
             "Mavros not started, nobody subcsribes to", pub.name)

    # stick around long enough for others to grab
    timeout_t = rospy.get_time() + _ONCE_DELAY
    while not rospy.is_shutdown() and rospy.get_time() < timeout_t:
        rospy.sleep(0.2)


def enable_offboard(args):
    try:
        guided_enable_cl = rospy.ServiceProxy(args.mavros_ns + "/cmd/guided_enable", CommandBool)
        ret = guided_enable_cl(value=True)
    except rospy.ServiceException as ex:
        fault(ex)


def do_local_pos(args):
    pub = rospy.Publisher(args.mavros_ns + "/setpoint/local_position", PoseStamped,
                          queue_size=10, latch=True)
    rospy.init_node("mavsetp", anonymous=True)

    pos = PoseStamped(header=Header(frame_id='mavsetp', stamp=rospy.get_rostime()))
    pos.pose.position = Point(x=args.position[0], y=args.position[1], z=args.position[2])

    publish_once(args, pub, pos)
    enable_offboard(args)


def do_local_vel(args):
    pub = rospy.Publisher(args.mavros_ns + "/setpoint/cmd_vel", TwistStamped,
                          queue_size=10, latch=True)
    rospy.init_node("mavsetp", anonymous=True)

    vel = TwistStamped(header=Header(frame_id='mavsetp', stamp=rospy.get_rostime()))
    vel.twist.linear = Vector3(x=args.velocity[0], y=args.velocity[1], z=args.velocity[2])

    publish_once(args, pub, vel)
    enable_offboard(args)


def do_local_selector(args):
    if args.position is not None:
        do_local_pos(args)
    else:
        do_local_vel(args)


# TODO: other stuff


def main():
    parser = argparse.ArgumentParser(description="Commad line tool for control the device by setpoints.")
    parser.add_argument('-n', '--mavros-ns', help="ROS node namespace", default="/mavros")
    parser.add_argument('-V', '--verbose', action='store_true', help="verbose output")
    subarg = parser.add_subparsers()


    local_args = subarg.add_parser('local', help="Send local setpoint")
    local_args.set_defaults(func=do_local_selector)
    local_group = local_args.add_mutually_exclusive_group(required=True)

    local_group.add_argument('-p', '--position', type=float, nargs=3,
                             metavar=('x', 'y', 'z'), help="Local position")

    local_group.add_argument('-v', '--velocity', type=float, nargs=3,
                             metavar=('vx', 'vy', 'vz'), help="Linear velocity")

    args = parser.parse_args(rospy.myargv(argv=sys.argv)[1:])
    args.func(args)


if __name__ == '__main__':
    main()
